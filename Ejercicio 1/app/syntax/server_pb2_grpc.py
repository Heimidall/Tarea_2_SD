# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import server_pb2 as server__pb2


class msgServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sendMsg = channel.unary_unary(
        '/msgService/sendMsg',
        request_serializer=server__pb2.chatMsg.SerializeToString,
        response_deserializer=server__pb2.confirmation.FromString,
        )
    self.askMsg = channel.unary_unary(
        '/msgService/askMsg',
        request_serializer=server__pb2.userID.SerializeToString,
        response_deserializer=server__pb2.chatMsg.FromString,
        )
    self.getUsers = channel.unary_unary(
        '/msgService/getUsers',
        request_serializer=server__pb2.emptyz.SerializeToString,
        response_deserializer=server__pb2.userIDS.FromString,
        )
    self.joinChat = channel.unary_unary(
        '/msgService/joinChat',
        request_serializer=server__pb2.userID.SerializeToString,
        response_deserializer=server__pb2.userID.FromString,
        )
    self.getAllMsgs = channel.unary_unary(
        '/msgService/getAllMsgs',
        request_serializer=server__pb2.userID.SerializeToString,
        response_deserializer=server__pb2.allMsgs.FromString,
        )


class msgServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def sendMsg(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def askMsg(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getUsers(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def joinChat(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAllMsgs(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_msgServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sendMsg': grpc.unary_unary_rpc_method_handler(
          servicer.sendMsg,
          request_deserializer=server__pb2.chatMsg.FromString,
          response_serializer=server__pb2.confirmation.SerializeToString,
      ),
      'askMsg': grpc.unary_unary_rpc_method_handler(
          servicer.askMsg,
          request_deserializer=server__pb2.userID.FromString,
          response_serializer=server__pb2.chatMsg.SerializeToString,
      ),
      'getUsers': grpc.unary_unary_rpc_method_handler(
          servicer.getUsers,
          request_deserializer=server__pb2.emptyz.FromString,
          response_serializer=server__pb2.userIDS.SerializeToString,
      ),
      'joinChat': grpc.unary_unary_rpc_method_handler(
          servicer.joinChat,
          request_deserializer=server__pb2.userID.FromString,
          response_serializer=server__pb2.userID.SerializeToString,
      ),
      'getAllMsgs': grpc.unary_unary_rpc_method_handler(
          servicer.getAllMsgs,
          request_deserializer=server__pb2.userID.FromString,
          response_serializer=server__pb2.allMsgs.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'msgService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
